{
  "APP_STARTED": {
    "key": "app_started",
    "id": "community id",
    "props": {},
    "description": "This event is fired when the app starts"
  },
  "FOLLOW_CREATED": {
    "key": "follow_created",
    "id": "follow id",
    "props": {
      "user:id": "the user id who was followed",
      "user:verified": "boolean reflecting if the target user is verified"
    },
    "description": "This event is fired when a user is followed"
  },
  "FOLLOW_DESTROYED": {
    "key": "follow_destroyed",
    "id": "follow id",
    "props": {
      "user:id": "the user id who was followed",
      "user:verified": "boolean reflecting if the target user is verified"
    },
    "description": "This event is fired when a user is unfollowed"
  },
  "USER_SUBSCRIPTION_CREATED": {
    "key": "user_subscription_created",
    "id": "subscription id",
    "props": {
      "user:id": "the user id who was subscribed to",
      "user:verified": "boolean reflecting if the target user is verified"
    },
    "description": "This event is fired when a user has been subscribed to"
  },
  "USER_SUBSCRIPTION_DESTROYED": {
    "key": "user_subscription_destroyed",
    "id": "subscription id",
    "props": {
      "user:id": "the user id who was unsubscribed from",
      "user:verified": "boolean reflecting if the target user is verified"
    },
    "description": "This event is fired when a user has been unsubscribed from"
  },
  "LIKE_CREATED": {
    "key": "like_created",
    "id": "like id",
    "props": {
      "post:id": "the post id to which the like belongs to",
      "post:post_type": "the post type",
      "post:user_id": "the user id of the posts owner",
      "post:ancestry": "the ancestry of the post",
      "post:ancestry_depth": "the post ancestry depth (0 root, 1 comment, 2 reply)",
      "post:sponsored": "boolean reflecting if the post is sponsored",
      "post:featured": "boolean reflecting if the post is featured",
      "post:parent_id": "the parent id of the post to which the like belongs to (omitted if post is root)"
    },
    "description": "This event is fired when a user has liked a post"
  },
  "LIKE_DESTROYED": {
    "key": "like_destroyed",
    "id": "like id",
    "props": {
      "post:id": "the post id to which the like belongs to",
      "post:post_type": "the post type",
      "post:user_id": "the user id of the posts owner",
      "post:ancestry": "the ancestry of the post",
      "post:ancestry_depth": "the post ancestry depth (0 root, 1 comment, 2 reply)",
      "post:sponsored": "boolean reflecting if the post is sponsored",
      "post:featured": "boolean reflecting if the post is featured",
      "post:parent_id": "the parent id of the post to which the like belongs to (omitted if post is root)"
    },
    "description": "This event is fired when a user has unliked a post"
  },
  "POST_VIEWED": {
    "key": "post_viewed",
    "id": "post id",
    "props": {
      "post:id": "the post id",
      "post:post_type": "the post type",
      "post:user_id": "the user id of the posts owner",
      "post:ancestry": "the ancestry of the post",
      "post:ancestry_depth": "the post ancestry depth (0 root, 1 comment, 2 reply)",
      "post:sponsored": "boolean reflecting if the post is sponsored",
      "post:featured": "boolean reflecting if the post is featured",
      "post:parent_id": "the parent id of the post to which the like belongs to (omitted if post is root)"
    },
    "description": "This event is fired when a post is viewed"
  },
  "POST_FLAGGED": {
    "key": "post_flagged",
    "id": "post id",
    "props": {
      "post:id": "the post id",
      "post:post_type": "the post type",
      "post:user_id": "the user id of the posts owner",
      "post:ancestry": "the ancestry of the post",
      "post:ancestry_depth": "the post ancestry depth (0 root, 1 comment, 2 reply)",
      "post:sponsored": "boolean reflecting if the post is sponsored",
      "post:featured": "boolean reflecting if the post is featured",
      "post:parent_id": "the parent id of the post to which the like belongs to (omitted if post is root)"
    },
    "description": "This event is fired when a user has flagged a post"
  },
  "POST_CREATED": {
    "key": "post_created",
    "id": "post id",
    "props": {
      "post:id": "the post id",
      "post:post_type": "the post type",
      "post:user_id": "the user id of the posts owner",
      "post:ancestry": "the ancestry of the post",
      "post:ancestry_depth": "the post ancestry depth (0 root, 1 comment, 2 reply)",
      "post:sponsored": "boolean reflecting if the post is sponsored",
      "post:featured": "boolean reflecting if the post is featured",
      "post:parent_id": "the parent id of the post to which the like belongs to (omitted if post is root)"
    },
    "description": "This event is fired when a user creates a post"
  },
  "POST_DESTROYED": {
    "key": "post_destroyed",
    "id": "post id",
    "props": {
      "post:id": "the post id",
      "post:post_type": "the post type",
      "post:user_id": "the user id of the posts owner",
      "post:ancestry": "the ancestry of the post",
      "post:ancestry_depth": "the post ancestry depth (0 root, 1 comment, 2 reply)",
      "post:sponsored": "boolean reflecting if the post is sponsored",
      "post:featured": "boolean reflecting if the post is featured",
      "post:parent_id": "the parent id of the post to which the like belongs to (omitted if post is root)"
    },
    "description": "This event is fired when a user deletes a post"
  },
  "GROUP_JOINED": {
    "key": "group_joined",
    "id": "group id",
    "props": {
      "group:id": "the group id",
      "group_join_request:state": "the state of the group join request (approved, pending, denied)"
    },
    "description": "This event is fired the user has applied to join a group"
  },
  "GROUP_LEFT": {
    "key": "group_left",
    "id": "group id",
    "props": {
      "group:id": "the group id",
    },
    "description": "This event is fired when a user leaves a group"
  },
  "CHAT_ENTERED": {
    "key": "chat_entered",
    "id": "chat id",
    "props": {
      "chat:id": "the chat id",
      "chat:chat_type": "the chat type",
    },
    "description": "This event is fired when a user enters the presence channel"
  },
  "CHAT_LEFT": {
    "key": "chat_left",
    "id": "chat id",
    "props": {
      "chat:id": "the chat id",
      "chat:chat_type": "the chat type",
    },
    "description": "This event is fired when a user leaves the presence channel"
  },
  "CHAT_MESSAGE_CREATED": {
    "key": "chat_message_created",
    "id": "chat message id",
    "props": {
      "chat:id": "the chat id",
      "chat:chat_type": "the chat type",
    },
    "description": "This event is fired when a user creates a chat message"
  },
  "CHAT_MESSAGE_REPORTED": {
    "key": "chat_message_reported",
    "id": "chat message id",
    "props": {
      "chat:id": "the chat id",
      "chat:chat_type": "the chat type",
    },
    "description": "This event is fired when a user reports a chat message"
  },
  "REACTION_CREATED": {
    "key": "reaction_created",
    "id": "reaction id",
    "props": {
      "post:id": "the post id",
      "reaction_icon:id": "the reaction icon id",
    },
    "description": "This event is fired when a user creates a reaction"
  },
  "EVENT_VIEWED": {
    "key": "event_viewed",
    "id": "event id",
    "props": {
      "event:event_type": "the type of the event",
    },
    "description": "This event is fired when a user views an Event"
  },
  "EVENTS_VIEWED": {
    "key": "events_viewed",
    "id": "events",
    "props": {
      "filter": "the type of the event",
    },
    "description": "This event is fired when a user views the Events page under a certain filter"
  },
  "EVENT_ATTENDEE_UPSERTED": {
    "key": "event_attendee_upserted",
    "id": "event attendee id",
    "props": {
      "event:id": "the event id",
      "event_attendee:status": "the event attendees status",
    },
    "description": "This event is fired when a user changes their RSVP to an Event"
  },
  "EVENT_ATTENDEE_DELETED": {
    "key": "event_attendee_deleted",
    "id": "event attendee id",
    "props": {
      "event:id": "the event id",
    },
    "description": "This event is fired when a user deletes their RSVP to an Event"
  }
}
